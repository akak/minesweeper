{"version":3,"sources":["Board.js","GameDetails.js","LayoutMap.js","boardState.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","convert2viewable","index","viewableWidth","Math","min","details","width","viewableX","viewableY","board","startingCell","cells","viewableCells","map","cell","className","value","neighbours","isFlagged","isRevealed","isMine","data-index","key","viewableHeight","height","style","gridTemplateColumns","gridTemplateRows","status","superhero","onClick","event","preventDefault","stopPropagation","actionType","shiftKey","parseInt","target","dataset","isNaN","onChange","onContextMenu","GameDetails","boardDetails","confirmation","notRevealed","useState","setWidth","setHeight","mines","setMines","onSubmit","window","confirm","type","e","minesLeft","LayoutMap","proportion","startingViewColumn","startingViewRow","mapStyle","viewableStyle","marginTop","marginLeft","click","buttons","X","pageX","currentTarget","offsetLeft","Y","pageY","offsetTop","onMouseMove","North","South","checkNorth","checkSouth","length","checkWest","checkEast","AllNeighbours","push","NW","NE","SE","SW","chgDetails","len","fill","c","i","newMinePlace","retries","floor","random","Error","forEach","viewable","startingColumn","boardReducer","state","action","rClickedCell","alert","clickedCell","reveal","queue","current","pop","w_index","e_index","n","App","initialState","useReducer","dispatch","setSuperhero","checked","clickType","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e50559b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Board(props) {\n    function convert2viewable(index) {\n      // convert viewable index to absolute index\n      const viewableWidth = Math.min(details.width, 20);\n      const viewableX = index % viewableWidth;\n      const viewableY = (index - viewableX) / viewableWidth;\n      let i = props.board.startingCell + viewableX + viewableY * props.board.details.width;\n      return i;\n    }\n\n    function handleClick(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      const actionType = event.shiftKey ? 'cMenu' : 'click';\n      let index = parseInt(event.target.dataset.index);\n      if (!isNaN(index)) props.onChange(actionType, convert2viewable(index));\n    }\n  \n    function cMenu(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      const index = parseInt(event.target.dataset.index);\n      if (!isNaN(index)) props.onChange('cMenu', convert2viewable(index));\n    }\n  \n    const details = props.board.details;\n    const cells = props.board.viewableCells(props.board.startingCell).map((cell, index) => {\n        let className = `cell neighbours${cell.value.neighbours}`;\n        if (cell.isFlagged) className += ' flag';\n        if (cell.isRevealed) className += ' revealed';\n        if (cell.value.isMine) className += ' mine';\n\n      return <div className={className} data-index={index} key={cell.index}></div>;\n    });\n\n    const viewableWidth = Math.min(details.width, 20);\n    const viewableHeight = Math.min(details.height, 20);\n    let style = {\n      gridTemplateColumns: `repeat(${viewableWidth}, 30px)`,\n      gridTemplateRows: `repeat(${viewableHeight}, 30px)`};\n    \n    let className = `board-grid status-${props.board.status}`;\n    if (props.superhero) className += ' superhero';\n    \n    return (\n      <div className={className} onClick={handleClick} onContextMenu={cMenu} style={style} >\n        {cells}\n      </div>\n    );\n  };\n  \n  export default Board;\n  ","import React, { useState } from 'react';\n\nfunction GameDetails(props) {\n    const board = props.board;\n    const boardDetails = board.details;\n    const confirmation =\n      board.notRevealed === board.details.width * board.details.height ||\n      board.status !== 'game';\n  \n    const [width, setWidth] = useState(boardDetails.width);\n    const [height, setHeight] = useState(boardDetails.height);\n    const [mines, setMines] = useState(boardDetails.mines);\n  \n    function newBoardClick(event) {\n        event.preventDefault();\n        \n        if (confirmation || window.confirm('The game will stop. Are you sure?'))\n          props.onChange(width, height, mines);\n    }\n  \n    return (\n      <div className=\"details\">\n        <form onSubmit={newBoardClick}>\n          <label>\n            width:\n            <input\n              type=\"number\"\n              value={width}\n              onChange={e => {setWidth(e.target.value)}}\n            />\n          </label>\n          <label>\n            height:\n            <input\n              type=\"number\"\n              value={height}\n              onChange={e => {setHeight(e.target.value)}}\n            />\n          </label>\n          <label>\n            mines:\n            <input\n              type=\"number\"\n              value={mines}\n              onChange={e => {setMines(e.target.value)}}\n            />\n          </label>\n          <input type=\"submit\" value=\"New\" />\n        </form>\n        <div>\n          <div>Left flags: {board.minesLeft}</div>\n          <div>status: {board.status}</div>\n          <div className=\"cloak\">\n            not revealed: {board.notRevealed}\n            starting: {board.startingCell}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \nexport default GameDetails;\n","import React from 'react';\n\nfunction LayoutMap(props) {\n    const board = props.board;\n    if (board.details.width <= 20 && board.details.height <= 20) return <></>;\n    const proportion = board.details.width / board.details.height;\n    const viewableWidth = Math.min(board.details.width, 20);\n    const viewableHeight = Math.min(board.details.height, 20);\n\n    const startingViewColumn = board.startingCell % board.details.width;\n    const startingViewRow = (board.startingCell - startingViewColumn) / board.details.width;\n\n    let mapStyle = {\n        height: board.details.width > board.details.height ? 300 / proportion : 300,\n        width: board.details.width < board.details.height ? proportion * 300 : 300\n    };\n\n    let viewableStyle = {\n        width: `${viewableWidth / board.details.width * mapStyle.width}px`,\n        height: `${viewableHeight / board.details.height * mapStyle.height}px`,\n        marginTop: `${startingViewRow / board.details.height * mapStyle.height}px`,\n        marginLeft: `${startingViewColumn / board.details.width * mapStyle.width}px`\n    };\n\n    function click(event) {\n        event.preventDefault();\n        event.stopPropagation();\n  \n        if (event.buttons & 1) {\n            let X = (event.pageX - event.currentTarget.offsetLeft);\n            let Y = (event.pageY - event.currentTarget.offsetTop);\n            \n            X = parseInt(X / mapStyle.width * board.details.width);\n            Y = parseInt(Y / mapStyle.height * board.details.height);\n            X -= parseInt(viewableWidth / 2);\n            Y -= parseInt(viewableHeight / 2);\n            if (X < 0) X = 0;\n            if (Y < 0) Y = 0;\n            if (X + viewableWidth > board.details.width)\n                X = board.details.width - viewableWidth;\n            if (Y + viewableHeight > board.details.height)\n                Y = board.details.height - viewableHeight;\n            props.onChange(X + Y * board.details.width);\n        }\n    }\n\n    return (\n        <div className=\"layout-area\">\n            <h3>Layout Map</h3>\n            <div className=\"layout-map\" style={mapStyle} onClick={click} onMouseMove={click}>\n                <div className=\"viewable\" style={viewableStyle}></div>\n            </div>\n        </div>\n    );\n}\n\nexport default LayoutMap;\n","const MAX_RETRY = 1000;\n\nfunction North(board) {\n  return -board.details.width;\n}\nfunction East(board) {\n  return 1;\n}\nfunction South(board) {\n  return board.details.width;\n}\nfunction West(board) {\n  return -1;\n}\n\nfunction NW(board) {\n  return North(board) + West(board);\n}\nfunction NE(board) {\n  return North(board) + East(board);\n}\nfunction SE(board) {\n  return South(board) + East(board);\n}\nfunction SW(board) {\n  return South(board) + West(board);\n}\n\nfunction checkNorth(board, index) {\n  return index >= South(board);\n}\nfunction checkSouth(board, index) {\n  return index < board.cells.length + North(board);\n}\nfunction checkWest(board, index) {\n  return index % South(board) > 0;\n}\nfunction checkEast(board, index) {\n  return index % South(board) !== South(board) - 1;\n}\nfunction AllNeighbours(board, index) {\n  let neighbours = [];\n  if (checkNorth(board, index) && checkWest(board, index))\n    neighbours.push(index + NW(board));\n  if (checkNorth(board, index))\n    neighbours.push(index + North(board));\n  if (checkNorth(board, index) && checkEast(board, index))\n    neighbours.push(index + NE(board));\n  if (checkEast(board, index))\n    neighbours.push(index + East(board));\n  if (checkSouth(board, index) && checkEast(board, index))\n    neighbours.push(index + SE(board));\n  if (checkSouth(board, index))\n    neighbours.push(index + South(board));\n  if (checkSouth(board, index) && checkWest(board, index))\n    neighbours.push(index + SW(board));\n  if (checkWest(board, index))\n    neighbours.push(index + West(board));\n  return neighbours;\n}\n\nfunction chgDetails(details, board = {cells: []}) {\n  // clean board\n  board.details = {width: details.width, height: details.height, mines: details.mines};\n  board.minesLeft = 0;\n  board.status = 'game';\n  board.cells.length = board.notRevealed = details.width * details.height;\n  let len = board.cells.length;\n  board.notRevealed = len;\n  board.startingCell = 0;\n  board.cells = board.cells.fill().map((c, i)=>({\n    isRevealed: false, \n    isFlagged: false,\n    index: i\n  })).map((c)=>{\n    c.value = {isMine: false, neighbours: 0};\n    return c;\n  });\n  \n  // shuffle mines and calculates the board neighbours etc.\n  while (board.minesLeft < board.details.mines) {\n    let newMinePlace;\n    for (let retries = 0;\n         retries === 0 || board.cells[newMinePlace].value.isMine;\n         retries++) {\n      // random place, with serial fallback. performance over randomizeness\n      newMinePlace = retries < MAX_RETRY ?\n          Math.floor(Math.random() * len) : retries === MAX_RETRY ?\n            0 : newMinePlace + 1;\n      if (newMinePlace >= len) throw new Error('Failed to shuffle mines. Too many retries!');\n    }\n    board.minesLeft++;\n    board.cells[newMinePlace].value.isMine = true;\n    AllNeighbours(board, newMinePlace).forEach(c => {\n      if (board.cells[c]) board.cells[c].value.neighbours++;\n      // TODO? calculate chunks\n    });\n  }\n\n  board.viewableCells = function(startingCell) {\n    if (board.details.width <= 20 && board.details.height <= 20) return board.cells;\n    let viewable = [];\n    const startingColumn = startingCell % board.details.width;\n    const viewableWidth = Math.min(board.details.width, 20);\n    for (let i = startingCell;\n         viewable.length < 400 && i < board.cells.length;\n         i++) {\n      viewable.push(board.cells[i]);\n      if (i % board.details.width === startingColumn + viewableWidth - 1)\n        i += board.details.width - viewableWidth;\n    }\n    return viewable;\n  };\n\n  return board;\n}\n\nfunction boardReducer(state, action) {\n    switch (action.type) {\n      case 'chgDetails':\n        state = chgDetails({width: action.width, height: action.height, mines: action.mines}, state);\n        state.superhero = action.superhero;\n        return {...state};\n      \n      case 'cMenu':\n        let rClickedCell = state.cells[action.index];\n        if (rClickedCell.isRevealed) break;\n  \n        if (rClickedCell.isFlagged) state.minesLeft++;\n        else {\n          if (state.minesLeft === 0) alert('you are using too many flags!');\n          state.minesLeft--;\n        }\n        rClickedCell.isFlagged = !rClickedCell.isFlagged;\n        action.type = '';\n        return {...state};\n  \n      case 'click':\n        let board = state.cells;\n        let clickedCell = state.cells[action.index];\n        \n        if (state.status !== 'game') break;\n  \n        if (state.notRevealed === state.cells.length) {\n          // TODO: check if we didnt started, and its a click on a mine - shuffle again...\n  \n        }\n  \n        if (clickedCell.isRevealed || clickedCell.isFlagged) break;\n  \n        if (clickedCell.value.isMine) {\n          clickedCell.isRevealed = true;\n          state.status = 'Lose';\n          return {...state};\n        }\n  \n        // paint as revealed all neighbours\n        function reveal(index) {\n          if (!board[index].isRevealed) {\n            board[index].isRevealed = true;\n            state.notRevealed--;\n          }\n        }\n        if (clickedCell.value.neighbours !== 0)\n          reveal(action.index);\n        else {\n          for (let queue = [action.index]; queue.length > 0; ) {\n            let current = queue.pop();\n            if (board[current].isRevealed) continue;\n            let w_index = current;\n            let e_index = current;\n            for (; board[w_index].value.neighbours === 0 && checkWest(state, w_index); w_index--);\n            for (; board[e_index].value.neighbours === 0 && checkEast(state, e_index); e_index++);\n            for (; w_index <= e_index; w_index++) {\n              \n              reveal(w_index);\n              if (board[w_index].value.neighbours === 0) {\n                AllNeighbours(state, w_index).forEach(n => {\n                  if (!board[n].isRevealed) queue.push(n);\n                });\n              }\n            }\n          }\n        }\n  \n        if (state.notRevealed === state.details.mines) {\n          state.status = 'Win';\n          board.forEach(c => {\n            c.isRevealed = true;\n            if (c.value.isMine) c.isFlagged = true;\n          });\n        }\n  \n        return {...state};\n  \n      case 'chgStartingCell':\n        state.startingCell = action.index;\n        return {...state};\n      \n      case 'dblClick':\n        // TODO...\n        break;\n      \n      default:\n        break;\n    }\n    \n    return state;\n  }\n\n  export { chgDetails, boardReducer };\n","import React, { useReducer, useState } from 'react';\nimport Board from './Board';\nimport GameDetails from './GameDetails';\nimport LayoutMap from './LayoutMap';\nimport { chgDetails, boardReducer } from './boardState';\nimport './App.css';\n\n\nfunction App() {\n  const initialState = chgDetails({width: 15, height: 15, mines: 25});\n  const [board, dispatch] = useReducer(boardReducer, initialState);\n  const [superhero, setSuperhero] = useState(false);\n  \n  function clicks(clickType, index) {\n    dispatch({type: clickType, index: index});\n  }\n\n  function handleBoardDetailsChg(width, height, mines) {\n    dispatch({\n      type: 'chgDetails',\n      width: parseInt(width),\n      height: parseInt(height),\n      mines: parseInt(mines),\n    });\n  }\n\n  function chgStartingCell(index) {\n    dispatch({\n      type: 'chgStartingCell',\n      index: index\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Minesweeper!\n        <input type=\"checkbox\" value={superhero} onChange={e => {setSuperhero(e.target.checked)}} />\n      </header>\n      <GameDetails board={board} onChange={handleBoardDetailsChg} />\n      <Board board={board} superhero={superhero} onChange={clicks} />\n      <LayoutMap board={board} onChange={chgStartingCell} />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}